package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"
	"fmt"

	"github.com/vaults-dev/vaults-backend/graph/model"
)

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.Login) (*model.User, error) {
	panic(fmt.Errorf("not implemented: Login - login"))
}

// SignUp is the resolver for the signUp field.
func (r *mutationResolver) SignUp(ctx context.Context, input model.SignUp) (*model.User, error) {
	panic(fmt.Errorf("not implemented: SignUp - signUp"))
}

// CreateWallet is the resolver for the createWallet field.
func (r *mutationResolver) CreateWallet(ctx context.Context, input model.CreateWalletPayload) (*model.Wallet, error) {
  wallet, err := r.WalletRepository.CreateWallet(input)
  if err != nil {
    return nil, err
  }

  return wallet, nil
}

// GetUser is the resolver for the getUser field.
func (r *queryResolver) GetUser(ctx context.Context, id string) (*model.User, error) {
	// intId, err := strconv.Atoi(id)
	// if err != nil {
	// 	return nil, err
	// }

	// var user dbModel.User
	// initializers.DBconn.First(&user, "id=?", intId)

	// userResp := model.User{
	// 	ID:        strconv.Itoa(int(user.ID)),
	// 	Name:      user.Name,
	// 	Email:     user.Email,
	// 	CreatedAt: user.CreatedAt.Format("2006-01-02T15:04:05-0700"),
	// 	UpdatedAt: user.CreatedAt.Format("2006-01-02T15:04:05-0700"),
	// }

	// return &userResp, nil

	return nil, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
